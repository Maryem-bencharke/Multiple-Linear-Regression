# -*- coding: utf-8 -*-
"""Regression_multiple (1) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n5CoWU8c7op-GbbjyFlcpU65CVokWOLW
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm
from scipy import stats
import pandas_datareader.data as web
import statsmodels.formula.api as smf

!pip install yfinance

import pandas as pd
import yfinance as yf

from google.colab import drive
drive.mount('/content/drive')

factor_df = pd.read_csv("/content/drive/MyDrive/diyae.CSV",skiprows=3)
print(factor_df)
STR_TO_MATCH = ' Annual Factors: January-December '
indices = factor_df.iloc[:, 0] == STR_TO_MATCH
start_of_annual = factor_df[indices].index[0]
factor_df = factor_df[factor_df.index < start_of_annual]

from matplotlib import pyplot as plt
from matplotlib import animation
from mpl_toolkits.mplot3d import Axes3D
import statsmodels.api as sm 
import matplotlib.pyplot as plt
from sklearn import linear_model

RISKY_ASSET='GOOGL'
MARKET_BENCHMARK= '^DJI'
START_DATE='2017-12-01'
END_DATE='2022-10-31'

#5. Rename the columns of the DataFrame, set a datetime index, and filter by dates:
factor_df.columns = ['date', 'mkt', 'smb', 'hml', 'rf']
factor_df['date'] = pd.to_datetime(factor_df['date'],
format='%Y%m') \
.dt.strftime("%Y-%m")
factor_df = factor_df.set_index('date')
factor_df = factor_df.loc[START_DATE:END_DATE]

factor_df

#6. Convert the values into numeric values and divide by 100:
factor_df = factor_df.apply(pd.to_numeric,
errors='coerce') \
.div(100)

#7. Download the prices of the risky asset:
asset_df = yf.download([RISKY_ASSET, MARKET_BENCHMARK],
                        start=START_DATE,
                        progress=False)

#8. Calculate the monthly returns on the risky asset:
y = asset_df['Adj Close'].resample('M') \
.last() \
.pct_change() \
.dropna()
y.index = y.index.strftime('%Y-%m')
y.name = ['rtn','market']

ff_data = factor_df.join(y)

y

#9. Merge the datasets and calculate the excess returns:

ff_data = factor_df.join(y)

ff_data['excess_rtn'] = ff_data.GOOGL - ff_data.rf

X = ff_data['mkt'].values.reshape(-1,1)

y = ff_data['excess_rtn'].values

y.shape

ols = linear_model.LinearRegression()

model = ols.fit(X, y)

response = model.predict(X)

R2 = model.score(X, y)

R2

plt.style.use('default')

plt.style.use('ggplot')


fig, ax = plt.subplots(figsize=(8, 4))


ax.plot(X, response, color='b', label='Regression model')

ax.scatter(X, y, edgecolor='r', facecolor='yellow', alpha=0.99, label='Sample data')

ax.set_ylabel('GOOGLE Asset', fontsize=14)

ax.set_xlabel('MARKET BENCHMARK', fontsize=14)

ax.text(0.9, 0.1, 'Fama French Model', fontsize=8, ha='center', va='center',

transform=ax.transAxes, color='grey', alpha=0.6)

ax.legend(facecolor='white', fontsize=11)

ax.set_title('$R^2= %.3f$' %R2, fontsize=18)


fig.tight_layout()






ff_model = smf.ols(formula='excess_rtn ~ mkt',

data=ff_data).fit()

print(ff_model.summary())

X = ff_data[['mkt','hml']].values.reshape(-1,2)
Y = ff_data['excess_rtn']

x = X[:,0]
y = X[:,1]
z = Y

x_pred = np.linspace(-0.2,0.2,20)
y_pred = np.linspace(-0.2,0.2,20)
xx_pred , yy_pred = np.meshgrid(x_pred, y_pred)
model_viz = np.array([xx_pred.flatten(),yy_pred.flatten()]).T

ols = linear_model.LinearRegression()
model = ols.fit(X,Y)
predicted = model.predict(model_viz)

r2 = model.score(X,Y)
r2

plt.style.use('default')
fig=plt.figure(figsize=(12,5))

ax1=fig.add_subplot(131,projection='3d')
ax2=fig.add_subplot(132,projection='3d')
ax3=fig.add_subplot(133,projection='3d')

axes=[ax1,ax2,ax3]

for ax in axes:
    ax.plot(x,y,z,color='b',zorder=20,linestyle='none',marker='o',alpha=0.5)
    ax.scatter(xx_pred.flatten(),yy_pred.flatten(),predicted,facecolor=(0,0,0,0),s=20,edgecolor='yellow')
    ax.set_xlabel('MARKET_BENCHMARK',fontsize=8)
    ax.set_ylabel('smb',fontsize=8)
    ax.set_zlabel('Google asset',fontsize=8)
    ax.locator_params(nbins=4,axis='x')
    ax.locator_params(nbins=5,axis='y')

ax1.text2D (0.7,0.7,'(1;90)',fontsize=13,ha='center',alpha=0.5,
            transform=ax1.transAxes, color='grey')
ax2.text2D (0.4,0.85,'(60;200)',fontsize=13,ha='center',alpha=0.5,
            transform=ax2.transAxes, color='grey')
ax3.text2D (0.5,0.85,'(120;30)',fontsize=13,ha='center',alpha=0.5,
            transform=ax3.transAxes, color='grey')

ax1.view_init(elev=1,azim=90)
ax2.view_init(elev=60,azim=200)
ax3.view_init(elev=120,azim=30)

fig.suptitle('$R^2=%.2f$' % r2, fontsize=20)

fig.tight_layout()

import matplotlib.animation as animation
def animate_elv(i):
  ax1.view_init(elev=i , azim=30)
  return fig,
anim = animation.FuncAnimation(fig, animate_elv, frames=360,
                              interval=20, blit=True)
anim.save('elevation_animation.mp4', writer = 'ffmpeg', fps = 30)

ff_model = smf.ols(formula = 'excess_rtn ~ mkt + smb + hml',
                            data =ff_data).fit()
print(ff_model.summary())

import scipy.stats 

F=scipy.stats.f.ppf(1-0.05,2,55)
F
#